{"version":3,"file":"static/js/235.1051f035.chunk.js","mappings":"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","sources":["app/views/material-kit/Component/table/FAQTable.js","app/views/material-kit/Component/Trash/FAQTrash.js","app/views/material-kit/Component/FAQ.js"],"sourcesContent":["import Api from 'Service/Api';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport dateFormat from 'dateformat';\r\nimport DataTable from 'react-data-table-component';\r\nimport { Button, Fab, Icon, IconButton } from '@mui/material';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { differenceBy } from 'lodash';\r\n\r\nimport Get from '../Function/Get';\r\nimport Update from '../Function/Update';\r\nimport ActionSweet from '../AddCompnent/Dialog/ActionSweet';\r\nimport ConfirmedSweet from '../AddCompnent/Dialog/ConfirmedSweet';\r\nimport CancelledSweet from '../AddCompnent/Dialog/CancelledSweet';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default function FAQTable() {\r\n  const [selectedRows, setSelectedRows] = React.useState([]);\r\n  const [toggleCleared, setToggleCleared] = React.useState(false);\r\n\r\n  var [FAQTabledata, setFAQTabledata] = useState([]);\r\n  var [Search, setSearchTable] = useState('');\r\n\r\n  var [FAQTabledataFilter, setFAQTabledataFilter] = useState([]);\r\n\r\n  var navigator = useNavigate();\r\n\r\n  const handleCategoryChange = (category) => {\r\n    var result = FAQTabledata.filter((FAQ) => {\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n      if (FAQ.FAQISActive == true && FAQ.FAQContents != null) {\r\n        return FAQ.ParentId.toString().includes(category.toLowerCase());\r\n      }\r\n    });\r\n\r\n    setFAQTabledataFilter(result);\r\n  };\r\n  useEffect(() => {\r\n    var result = FAQTabledata.filter((FAQ) => {\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n      if (FAQ.FAQISActive == true && FAQ.FAQContents != null) {\r\n        return FAQ.FAQTitle.toLowerCase().includes(Search.toLowerCase());\r\n      }\r\n    });\r\n\r\n    setFAQTabledataFilter(result);\r\n  }, [Search, FAQTabledata]);\r\n\r\n  var getFAQData = async () => {\r\n    Get(Api.FAQGetAPi).then(handleResponse).then(processGet).catch(handleError);\r\n  };\r\n\r\n  const processGet = (result) => {\r\n    if (result.Status) {\r\n      setFAQTabledataFilter(result.result);\r\n      setFAQTabledata(result.result);\r\n    } else {\r\n      setFAQTabledataFilter(result.result);\r\n      setFAQTabledata(result.result);\r\n    }\r\n  };\r\n  const handleResponse = (response) => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  };\r\n  const handleError = (error) => {\r\n    console.log('Error fetching user role:', error);\r\n  };\r\n\r\n  var FAQUpdateYes = (FAQId) => {\r\n    var raw = JSON.stringify({\r\n      FAQISActive: false\r\n    });\r\n    Update(`${Api.FAQGetAPi}?FAQId=${FAQId}`, raw)\r\n      .then(handleResponse)\r\n      .then(processUpdate)\r\n      .catch(handleError);\r\n  };\r\n\r\n  const processUpdate = (data) => {\r\n    if (data.Status) {\r\n      getFAQData();\r\n    } else {\r\n      getFAQData();\r\n    }\r\n  };\r\n\r\n  const FaqTrashed = (FAQId) => {\r\n    ActionSweet('Trash').then((result) => processTrash(result, FAQId));\r\n  };\r\n\r\n  const processTrash = (result, FAQId) => {\r\n    if (result.isConfirmed) {\r\n      FAQUpdateYes(FAQId);\r\n      ConfirmedSweet('Trash');\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      CancelledSweet();\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getFAQData();\r\n  }, []);\r\n\r\n  var FAQUpdate = (id) => {\r\n    navigator(`/backend/update-faq?faqId=${id}`);\r\n  };\r\n\r\n  var columns = [\r\n    {\r\n      name: 'Title',\r\n      selector: (row) => {\r\n        if (row.FAQISActive == true) {\r\n          return (\r\n            <>\r\n              <p dangerouslySetInnerHTML={{ __html: row.FAQTitle.substring(0, 20) + '....' }} />\r\n            </>\r\n          );\r\n        }\r\n      },\r\n      sortable: true\r\n    },\r\n\r\n    {\r\n      name: 'Author',\r\n      selector: (row) => {\r\n        if (row.FAQISActive == true) {\r\n          return (\r\n            <>\r\n              <p dangerouslySetInnerHTML={{ __html: row.Author }} />\r\n            </>\r\n          );\r\n        }\r\n      },\r\n      sortable: true\r\n    },\r\n    {\r\n      name: ' Date',\r\n      selector: (row) => {\r\n        if (row.FAQISActive == true) {\r\n          return (\r\n            <>\r\n              <span>\r\n                Published <br></br> {dateFormat(row.CreatedDate, 'mmmm dS, yyyy')}{' '}\r\n              </span>\r\n            </>\r\n          );\r\n        }\r\n      },\r\n\r\n      sortable: true\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <>\r\n          <div class=\"form-check-inline m-4 mb-0 mt-0 text-center\">Action</div>\r\n        </>\r\n      ),\r\n\r\n      cell: (row) => {\r\n        if (row.FAQISActive == true) {\r\n          return (\r\n            <>\r\n              <>\r\n                <IconButton>\r\n                  <Fab\r\n                    color=\"secondary\"\r\n                    aria-label=\"Edit\"\r\n                    className=\"button democss\"\r\n                    onClick={() => FAQUpdate(row.FAQId)}\r\n                  >\r\n                    <Icon className=\"democssicon\">edit_icon</Icon>\r\n                  </Fab>\r\n                </IconButton>{' '}\r\n                <IconButton>\r\n                  <Fab\r\n                    onClick={() => FaqTrashed(row.FAQId)}\r\n                    aria-label=\"Delete\"\r\n                    className=\"button democss\"\r\n                    variant=\"outlined\"\r\n                  >\r\n                    <Icon className=\"democssicon\">delete</Icon>\r\n                  </Fab>\r\n                </IconButton>\r\n              </>\r\n            </>\r\n          );\r\n        }\r\n      }\r\n    }\r\n  ];\r\n\r\n  const actions = (\r\n    <>\r\n      {' '}\r\n      <Link\r\n        key=\"add\"\r\n        to=\"/backend/manage-faq\"\r\n        className=\"btn-primary form-control mb-4 w-50 w-auto btn-class\"\r\n      >\r\n        <img src=\"/add.png\" width={16} style={{ filter: ' invert(1)' }} /> Add Faq\r\n      </Link>\r\n    </>\r\n  );\r\n\r\n  const handleRowSelected = React.useCallback((state) => {\r\n    setSelectedRows(state.selectedRows);\r\n  }, []);\r\n\r\n  const contextActions = React.useMemo(() => {\r\n    const handleDelete = () => {\r\n      const Id = selectedRows.map((r) => r.FAQId);\r\n      const FaqID = Id.toString();\r\n\r\n      if (FaqID != null) {\r\n        FaqTrashed(FaqID);\r\n        setFAQTabledataFilter(differenceBy(FAQTabledataFilter, 'FAQTitle'));\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Button\r\n        key=\"delete\"\r\n        onClick={handleDelete}\r\n        className=\"btn-primary form-control  w-50 w-auto btn-class \"\r\n      >\r\n        Trash\r\n      </Button>\r\n    );\r\n  }, [\r\n    FAQTabledataFilter,\r\n    selectedRows,\r\n    setFAQTabledataFilter,\r\n    setToggleCleared,\r\n    toggleCleared,\r\n    Api.FAQGetAPi\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        style={{ width: '100%' }}\r\n        columns={columns}\r\n        data={FAQTabledataFilter}\r\n        pagination\r\n        fixedHeader\r\n        fixedHeaderScrollHeight=\"auto\"\r\n        selectableRowsHighlight\r\n        subHeader\r\n        selectableRows\r\n        actions={actions}\r\n        contextActions={contextActions}\r\n        onSelectedRowsChange={handleRowSelected}\r\n        clearSelectedRows={toggleCleared}\r\n        subHeaderComponent={\r\n          <>\r\n            <div className=\"jBBxnG justify-content-end justify-content-lg-start\">\r\n              <h6 className=\"m-1 mb-4\">\r\n                <img src=\"/loupe.png\" style={{ width: '18px' }} /> Search :\r\n              </h6>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search by keyword....\"\r\n                className=\"form-control m-1 mb-4 w-auto\"\r\n                value={Search}\r\n                onChange={(e) => setSearchTable(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"jBBxnG justify-content-end\">\r\n              <h6 className=\"m-1 mb-4\">\r\n                <img src=\"/sort.png\" style={{ width: '20px' }} /> Filter by:\r\n              </h6>\r\n              <select\r\n                className=\"form-select m-1 mb-4 w-50\"\r\n                aria-label=\"Default select example\"\r\n                onChange={(e) => handleCategoryChange(e.target.value)}\r\n              >\r\n                <option value=\"\">---Select Category---</option>\r\n                {FAQTabledata.map((obj) => {\r\n                  if (\r\n                    obj.FAQISActive === true &&\r\n                    obj.IsHeading != null &&\r\n                    obj.FAQContents == null\r\n                  ) {\r\n                    return <option value={obj.ParentId}>{obj.FAQTitle}</option>;\r\n                  }\r\n                  return null;\r\n                })}\r\n              </select>\r\n            </div>\r\n          </>\r\n        }\r\n        subHeaderAlign=\"right\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import Api from 'Service/Api';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport dateFormat from 'dateformat';\r\nimport DataTable from 'react-data-table-component';\r\nimport { Button, Fab, Icon, IconButton } from '@mui/material';\r\n\r\nimport { differenceBy } from 'lodash';\r\nimport Get from '../Function/Get';\r\nimport Deletes from '../Function/Delete';\r\nimport Update from '../Function/Update';\r\nimport ActionSweet from '../AddCompnent/Dialog/ActionSweet';\r\nimport ConfirmedSweet from '../AddCompnent/Dialog/ConfirmedSweet';\r\nimport CancelledSweet from '../AddCompnent/Dialog/CancelledSweet';\r\nimport Swal from 'sweetalert2';\r\nexport default function FAQTrash() {\r\n  const [selectedRows, setSelectedRows] = React.useState([]);\r\n  const [toggleCleared, setToggleCleared] = React.useState(false);\r\n\r\n  var [Search, setSearchTable] = useState('');\r\n  var [FAQTabledataFilter, setFAQTabledataFilter] = useState([]);\r\n\r\n  var [FAQTabledata, setFAQTabledata] = useState([]);\r\n  var [Search, setSearchTable] = useState('');\r\n  var [FAQTabledataFilter, setFAQTabledataFilter] = useState([]);\r\n\r\n  const handleCategoryChange = (category) => {\r\n    setSelectedRows([]);\r\n    setToggleCleared(!toggleCleared);\r\n    var result = FAQTabledata.filter((FAQ) => {\r\n      if (FAQ.FAQISActive != true && FAQ.FAQContents != null) {\r\n        return FAQ.ParentId.toString().includes(category.toLowerCase());\r\n      }\r\n    });\r\n    setFAQTabledataFilter(result);\r\n  };\r\n\r\n  const handleResponse = (response) => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  };\r\n  const handleError = (error) => {\r\n    console.log('Error fetching user role:', error);\r\n  };\r\n\r\n  var getFAQData = async () => {\r\n    Get(Api.FAQGetAPi).then(handleResponse).then(processGet).catch(handleError);\r\n  };\r\n\r\n  const processGet = (result) => {\r\n    if (result.Status) {\r\n      setFAQTabledata(result.result);\r\n      setFAQTabledataFilter(result.result);\r\n    } else {\r\n      setFAQTabledata(result.result);\r\n      setFAQTabledataFilter(result.result);\r\n    }\r\n  };\r\n\r\n  var handleDelete = async (Id) => {\r\n    Deletes(`${Api.FAQGetAPi}?FAQId=${Id}`)\r\n      .then(handleResponse)\r\n      .then(processDelete)\r\n      .catch(handleError);\r\n  };\r\n  const processDelete = (result) => {\r\n    if (result.Status) {\r\n      getFAQData();\r\n    } else {\r\n      getFAQData();\r\n    }\r\n  };\r\n\r\n  var FAQRestore = async (FAQId) => {\r\n    var raw = JSON.stringify({\r\n      FAQISActive: true\r\n    });\r\n\r\n    Update(`${Api.FAQGetAPi}?FAQId=${FAQId}`, raw)\r\n      .then(handleResponse)\r\n      .then(processUpdate)\r\n      .catch(handleError);\r\n  };\r\n\r\n  const processUpdate = (result) => {\r\n    if (result.Status) {\r\n      getFAQData();\r\n    } else {\r\n      getFAQData();\r\n    }\r\n  };\r\n\r\n  const processRestore = (result, FAQId) => {\r\n    if (result.isConfirmed) {\r\n      FAQRestore(FAQId);\r\n      ConfirmedSweet('Restore');\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      CancelledSweet();\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n    }\r\n  };\r\n\r\n  const processDeleted = (result, FAQId) => {\r\n    if (result.isConfirmed) {\r\n      handleDelete(FAQId);\r\n      ConfirmedSweet('Delete');\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      CancelledSweet();\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n    }\r\n  };\r\n  const FAQsDeletes = async (FAQId) => {\r\n    ActionSweet('Delete').then((result) => processDeleted(result, FAQId));\r\n  };\r\n\r\n  var RestoreData = (FAQId) => {\r\n    ActionSweet('Restore').then((result) => processRestore(result, FAQId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFAQData();\r\n  }, []);\r\n\r\n  var columns = [\r\n    {\r\n      name: 'Title',\r\n      selector: (row) => {\r\n        if (row.FAQISActive != true) {\r\n          return (\r\n            <>\r\n              <p dangerouslySetInnerHTML={{ __html: row.FAQTitle.substring(0, 20) + '....' }} />\r\n            </>\r\n          );\r\n        }\r\n      },\r\n      sortable: true\r\n    },\r\n    {\r\n      name: ' Author',\r\n      selector: (row) => {\r\n        if (row.FAQISActive != true) {\r\n          return (\r\n            <>\r\n              <p dangerouslySetInnerHTML={{ __html: row.Author }} />\r\n            </>\r\n          );\r\n        }\r\n      },\r\n      sortable: true\r\n    },\r\n    {\r\n      name: ' Date',\r\n      selector: (row) => {\r\n        if (row.FAQISActive != true) {\r\n          return (\r\n            <>\r\n              <span>\r\n                Published <br></br> {dateFormat(row.CreatedDate, 'mmmm dS, yyyy')}{' '}\r\n              </span>\r\n            </>\r\n          );\r\n        }\r\n      },\r\n\r\n      sortable: true\r\n    },\r\n\r\n    {\r\n      name: <div class=\"form-check-inline m-4 mb-0 mt-0 text-center\">Action</div>,\r\n      cell: (row) => {\r\n        if (row.FAQISActive != true) {\r\n          return (\r\n            <>\r\n              <IconButton>\r\n                <Fab\r\n                  className=\"button democss\"\r\n                  color=\"secondary\"\r\n                  aria-label=\"Edit\"\r\n                  onClick={() => RestoreData(row.FAQId)}\r\n                >\r\n                  <Icon className=\"democssicon\">restore_icon</Icon>\r\n                </Fab>\r\n              </IconButton>\r\n              <IconButton>\r\n                <Fab\r\n                  onClick={() => FAQsDeletes(row.FAQId)}\r\n                  className=\"button democss\"\r\n                  aria-label=\"Delete\"\r\n                  variant=\"outlined\"\r\n                >\r\n                  <Icon className=\"democssicon\">delete</Icon>\r\n                </Fab>\r\n              </IconButton>\r\n            </>\r\n          );\r\n        }\r\n      },\r\n      sortable: true\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    var result = FAQTabledata.filter((FAQ) => {\r\n      setSelectedRows([]);\r\n      setToggleCleared(!toggleCleared);\r\n      if (FAQ.FAQISActive != true && FAQ.FAQContents != null) {\r\n        return FAQ.FAQTitle.toLowerCase().includes(Search.toLowerCase());\r\n      }\r\n    });\r\n    setFAQTabledataFilter(result);\r\n  }, [Search, FAQTabledata]);\r\n\r\n  const actions = <></>;\r\n\r\n  const handleRowSelected = React.useCallback((state) => {\r\n    setSelectedRows(state.selectedRows);\r\n  }, []);\r\n\r\n  const contextActions = React.useMemo(() => {\r\n    const handleDeleteCheckBox = () => {\r\n      const Id = selectedRows.map((r) => r.FAQId);\r\n      const FaqID = Id.toString();\r\n\r\n      if (FaqID != null) {\r\n        RestoreData(FaqID);\r\n        setFAQTabledataFilter(differenceBy(FAQTabledataFilter, 'FAQTitle'));\r\n      }\r\n    };\r\n    const handlePermanentlyDelete = () => {\r\n      const Id = selectedRows.map((r) => r.FAQId);\r\n      const FaqID = Id.toString();\r\n\r\n      if (FaqID != null) {\r\n        FAQsDeletes(FaqID);\r\n        setFAQTabledataFilter(differenceBy(FAQTabledataFilter, 'FAQTitle'));\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {' '}\r\n        <Button\r\n          key=\"delete\"\r\n          onClick={handleDeleteCheckBox}\r\n          className=\"btn-primary form-control  w-50 w-auto btn-class \"\r\n        >\r\n          Restore\r\n        </Button>\r\n        <Button\r\n          key=\"delete\"\r\n          onClick={handlePermanentlyDelete}\r\n          className=\"btn-primary form-control  w-50 w-auto btn-class \"\r\n        >\r\n          Permanently Delete\r\n        </Button>\r\n      </>\r\n    );\r\n  }, [\r\n    FAQTabledataFilter,\r\n    selectedRows,\r\n    setFAQTabledataFilter,\r\n    setToggleCleared,\r\n    toggleCleared,\r\n    Api.FAQGetAPi\r\n  ]);\r\n  return (\r\n    <div>\r\n      <>\r\n        <DataTable\r\n          style={{ width: '100%' }}\r\n          columns={columns}\r\n          data={FAQTabledataFilter}\r\n          pagination\r\n          fixedHeader\r\n          fixedHeaderScrollHeight=\"auto\"\r\n          selectableRowsHighlight\r\n          subHeader\r\n          selectableRows\r\n          actions={actions}\r\n          contextActions={contextActions}\r\n          onSelectedRowsChange={handleRowSelected}\r\n          clearSelectedRows={toggleCleared}\r\n          subHeaderComponent={\r\n            <>\r\n              <div class=\"jBBxnG justify-content-end justify-content-lg-start\">\r\n                <h6 className=\" m-1 mb-4\">\r\n                  <img src=\"/loupe.png\" style={{ width: '18px' }} /> Search :\r\n                </h6>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search by keyword....\"\r\n                  className=\" form-control m-1 mb-4 w-auto\"\r\n                  value={Search}\r\n                  onChange={(e) => setSearchTable(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"jBBxnG justify-content-end\">\r\n                <h6 className=\" m-1 mb-4\">\r\n                  <img src=\"/sort.png\" style={{ width: '20px' }} /> Filter by:\r\n                </h6>\r\n                <select\r\n                  className=\"form-select m-1 mb-4 w-50\"\r\n                  aria-label=\"Default select example\"\r\n                  onChange={(e) => handleCategoryChange(e.target.value)}\r\n                >\r\n                  <option value=\"\">---Select Category---</option>\r\n                  {FAQTabledata.map((obj) => {\r\n                    if (\r\n                      obj.FAQISActive == true &&\r\n                      obj.IsHeading != null &&\r\n                      obj.FAQContents == null\r\n                    ) {\r\n                      return <option value={obj.ParentId}>{obj.FAQTitle}</option>;\r\n                    }\r\n                  })}\r\n                </select>\r\n              </div>\r\n            </>\r\n          }\r\n          subHeaderAlign=\"right\"\r\n        />\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n","import { Box, Stack, styled } from '@mui/material';\r\nimport { SimpleCard } from 'app/components';\r\n\r\nimport FAQTable from './table/FAQTable';\r\nimport FAQTrash from './Trash/FAQTrash';\r\n\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n  margin: '30px',\r\n  [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n  '& .breadcrumb': {\r\n    marginBottom: '30px',\r\n    [theme.breakpoints.down('sm')]: { marginBottom: '16px' }\r\n  }\r\n}));\r\n\r\nconst FAQ = () => {\r\n  return (\r\n    <Container>\r\n      <Stack spacing={3} className=\"container mt-0\">\r\n        <title>Digi2l - Faq contents</title>\r\n        <Box>\r\n          <div class=\"card-header mt-4\">\r\n            <div class=\"row align-items-center\">\r\n              <div class=\"col\">\r\n                <h2 class=\"fs-5 mb-0 card-title\">Faq contents</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Box>\r\n        <Box>\r\n          <div className=\"\">\r\n            <Tabs>\r\n              <TabList>\r\n                <Tab>Published</Tab>\r\n                <Tab>Trashed</Tab>\r\n              </TabList>\r\n\r\n              <TabPanel>\r\n                <SimpleCard>\r\n                  <FAQTable />\r\n                </SimpleCard>\r\n              </TabPanel>\r\n              <TabPanel>\r\n                <SimpleCard>\r\n                  <FAQTrash />\r\n                </SimpleCard>\r\n              </TabPanel>\r\n            </Tabs>\r\n          </div>\r\n        </Box>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FAQ;\r\n"],"names":["FAQTable","selectedRows","setSelectedRows","React","toggleCleared","setToggleCleared","FAQTabledata","setFAQTabledata","useState","Search","setSearchTable","FAQTabledataFilter","setFAQTabledataFilter","navigator","useNavigate","useEffect","result","filter","FAQ","FAQISActive","FAQContents","FAQTitle","toLowerCase","includes","getFAQData","async","Get","Api","then","handleResponse","processGet","catch","handleError","Status","response","ok","Error","json","error","console","log","processUpdate","data","FaqTrashed","FAQId","ActionSweet","processTrash","isConfirmed","raw","JSON","stringify","Update","concat","FAQUpdateYes","ConfirmedSweet","dismiss","Swal","CancelledSweet","columns","name","selector","row","_jsx","_Fragment","children","dangerouslySetInnerHTML","__html","substring","sortable","Author","_jsxs","dateFormat","CreatedDate","class","cell","IconButton","Fab","color","className","onClick","FAQUpdate","id","Icon","variant","actions","Link","to","src","width","style","handleRowSelected","state","contextActions","Button","handleDelete","FaqID","map","r","toString","differenceBy","DataTable","pagination","fixedHeader","fixedHeaderScrollHeight","selectableRowsHighlight","subHeader","selectableRows","onSelectedRowsChange","clearSelectedRows","subHeaderComponent","type","placeholder","value","onChange","e","target","category","ParentId","handleCategoryChange","obj","IsHeading","subHeaderAlign","FAQTrash","processDelete","processRestore","FAQRestore","processDeleted","Deletes","Id","FAQsDeletes","RestoreData","handleDeleteCheckBox","handlePermanentlyDelete","Container","styled","_ref","theme","margin","breakpoints","down","marginBottom","Stack","spacing","Box","Tabs","TabList","Tab","TabPanel","SimpleCard"],"sourceRoot":""}